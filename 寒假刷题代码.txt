存在重复元素：https://leetcode-cn.com/problems/contains-duplicate/

class Solution {
public:
	bool containsDuplicate(vector<int>& nums) {
		if (nums.empty())
			return false;
		sort(nums.begin(), nums.end());
		for (int i = 0; i < nums.size() - 1; i++)
		{
			if (nums[i] == nums[i + 1])
				return true;
		}
		return false;
	}
};


长键按入：https://leetcode-cn.com/problems/long-pressed-name/

class Solution {
public:
    bool isLongPressedName(string name, string typed) {
            if (name.compare(typed) == 0)
                return true;
            if (name.size() == typed.size())
                return false;
            int i = 0,j = 0;
            for (; j < typed.size(); j++)
            {
                if (i < name.size() && name[i] == typed[j])
                {
                    i++;
                }
                else if (i == 0)
                    return false;
                else if (name[i - 1] != typed[j])
                    return false;
            }
            if (i == name.size())
                return true;
            return false;
    }
};

有序数组的平方：https://leetcode-cn.com/problems/squares-of-a-sorted-array/

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        for (auto&e : nums)
            e *= e;
        sort(nums.begin(), nums.end());
        return nums;
    }
};

仅仅反转字母：https://leetcode-cn.com/problems/reverse-only-letters/

class Solution {
public:
    string reverseOnlyLetters(string S) {
        int begin=0,end=S.size()-1;

        while(begin<end)
        {
            while(begin<end)
            {
                if(isalpha(S[begin]))
                    break;
                begin++;
            }

            while(begin<end)
            {
                if(isalpha(S[end]))
                    break;
                end--;
            }

            if(begin>=end)
                break;
            else
            {
                swap(S[begin],S[end]);
                begin++;
                end--;
            }
        }
        return S;
    }
};

第三大的数：https://leetcode-cn.com/problems/third-maximum-number/

class Solution {
public:
    int thirdMax(vector<int>& nums) {
        set<int> s(nums.begin(), nums.end());
        auto it = s.end();
        it--;
        int i = 2;
        if (s.size() >= 3)
            while(i--)
                it--;
        return *it;
    }
};

加一：https://leetcode-cn.com/problems/plus-one/

class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        int i = digits.size() - 1;
        if (digits[i] == 9)
        {
            while(i >= 0 && digits[i] == 9)
            {
                digits[i] = 0;
                i--;
            }
            if (i < 0)
                digits.insert(digits.begin(),1);
            else
                digits[i]++;
        }
        else
            digits[i]++;
        return digits;
    }
};

俩数之和：https://leetcode-cn.com/problems/two-sum/

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ret;
        for (int i = 0; i < nums.size(); i++)
        {
            for (int j = i + 1; j < nums.size(); j++)
            {
                if (nums[i] + nums[j] == target)
                {
                    ret.push_back(i);
                    ret.push_back(j);
                    break;
                }
            }
        }
        return ret;
    }
};

二进制求和：https://leetcode-cn.com/problems/add-binary/submissions/

class Solution {
public:
    string addBinary(string a, string b) {
        if (a.size() < b.size())
            swap(a,b);

        int x = a.size() - b.size();
        b.insert(b.begin(), x, '0');

        int flag = 0;
        for (int i = a.size() - 1; i >= 0; i--)
        {
            if (a[i] == '1' && b[i] == '1') //都为1的情况
            {
                if (flag)
                    a[i] = '1';
                else
                    a[i] = '0';
                flag = 1;
            }
            else if (a[i] == '1' || b[i] == '1')    //一个为1，一个为0的情况
            {
                if (flag)
                    a[i] = '0';
                else
                    a[i] = '1';
            }
            else    //都为0的情况
            {
                if (flag)
                {
                    a[i] = '1';
                    flag = 0;
                }
                else
                    a[i] = '0';
            }
        }
        if (flag)
            a.insert(a.begin(), '1');
        return a;
    }
};

按奇偶排序数组：https://leetcode-cn.com/problems/sort-array-by-parity/

class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& A) {
        int left = 0;
        int right = A.size() - 1;
        while (left < right)
        {
            while(left < right && A[left] % 2 == 0)
                left++;
            while(left < right && A[right] % 2 == 1)
                right--;
            swap(A[left], A[right]);
            left++;
            right--;
        }
        return A;
    }
};

寻找数组的中心索引：https://leetcode-cn.com/problems/find-pivot-index/submissions/

class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        int count = 0;
        int front = 0;
        for (auto& e : nums)
            count += e;
        for (int i = 0; i < nums.size(); i++)
        {
            if (2 * front + nums[i]== count)
                return i;
            else
                front += nums[i];
        } 
        return -1;
    }
};