存在重复元素：https://leetcode-cn.com/problems/contains-duplicate/

class Solution {
public:
	bool containsDuplicate(vector<int>& nums) {
		if (nums.empty())
			return false;
		sort(nums.begin(), nums.end());
		for (int i = 0; i < nums.size() - 1; i++)
		{
			if (nums[i] == nums[i + 1])
				return true;
		}
		return false;
	}
};


长键按入：https://leetcode-cn.com/problems/long-pressed-name/

class Solution {
public:
    bool isLongPressedName(string name, string typed) {
            if (name.compare(typed) == 0)
                return true;
            if (name.size() == typed.size())
                return false;
            int i = 0,j = 0;
            for (; j < typed.size(); j++)
            {
                if (i < name.size() && name[i] == typed[j])
                {
                    i++;
                }
                else if (i == 0)
                    return false;
                else if (name[i - 1] != typed[j])
                    return false;
            }
            if (i == name.size())
                return true;
            return false;
    }
};

有序数组的平方：https://leetcode-cn.com/problems/squares-of-a-sorted-array/

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        for (auto&e : nums)
            e *= e;
        sort(nums.begin(), nums.end());
        return nums;
    }
};

仅仅反转字母：https://leetcode-cn.com/problems/reverse-only-letters/

class Solution {
public:
    string reverseOnlyLetters(string S) {
        int begin=0,end=S.size()-1;

        while(begin<end)
        {
            while(begin<end)
            {
                if(isalpha(S[begin]))
                    break;
                begin++;
            }

            while(begin<end)
            {
                if(isalpha(S[end]))
                    break;
                end--;
            }

            if(begin>=end)
                break;
            else
            {
                swap(S[begin],S[end]);
                begin++;
                end--;
            }
        }
        return S;
    }
};

第三大的数：https://leetcode-cn.com/problems/third-maximum-number/

class Solution {
public:
    int thirdMax(vector<int>& nums) {
        set<int> s(nums.begin(), nums.end());
        auto it = s.end();
        it--;
        int i = 2;
        if (s.size() >= 3)
            while(i--)
                it--;
        return *it;
    }
};

加一：https://leetcode-cn.com/problems/plus-one/

class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        int i = digits.size() - 1;
        if (digits[i] == 9)
        {
            while(i >= 0 && digits[i] == 9)
            {
                digits[i] = 0;
                i--;
            }
            if (i < 0)
                digits.insert(digits.begin(),1);
            else
                digits[i]++;
        }
        else
            digits[i]++;
        return digits;
    }
};

俩数之和：https://leetcode-cn.com/problems/two-sum/

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ret;
        for (int i = 0; i < nums.size(); i++)
        {
            for (int j = i + 1; j < nums.size(); j++)
            {
                if (nums[i] + nums[j] == target)
                {
                    ret.push_back(i);
                    ret.push_back(j);
                    break;
                }
            }
        }
        return ret;
    }
};

二进制求和：https://leetcode-cn.com/problems/add-binary/submissions/

class Solution {
public:
    string addBinary(string a, string b) {
        if (a.size() < b.size())
            swap(a,b);

        int x = a.size() - b.size();
        b.insert(b.begin(), x, '0');

        int flag = 0;
        for (int i = a.size() - 1; i >= 0; i--)
        {
            if (a[i] == '1' && b[i] == '1') //都为1的情况
            {
                if (flag)
                    a[i] = '1';
                else
                    a[i] = '0';
                flag = 1;
            }
            else if (a[i] == '1' || b[i] == '1')    //一个为1，一个为0的情况
            {
                if (flag)
                    a[i] = '0';
                else
                    a[i] = '1';
            }
            else    //都为0的情况
            {
                if (flag)
                {
                    a[i] = '1';
                    flag = 0;
                }
                else
                    a[i] = '0';
            }
        }
        if (flag)
            a.insert(a.begin(), '1');
        return a;
    }
};

按奇偶排序数组：https://leetcode-cn.com/problems/sort-array-by-parity/

class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& A) {
        int left = 0;
        int right = A.size() - 1;
        while (left < right)
        {
            while(left < right && A[left] % 2 == 0)
                left++;
            while(left < right && A[right] % 2 == 1)
                right--;
            swap(A[left], A[right]);
            left++;
            right--;
        }
        return A;
    }
};

寻找数组的中心索引：https://leetcode-cn.com/problems/find-pivot-index/submissions/

class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        int count = 0;
        int front = 0;
        for (auto& e : nums)
            count += e;
        for (int i = 0; i < nums.size(); i++)
        {
            if (2 * front + nums[i]== count)
                return i;
            else
                front += nums[i];
        } 
        return -1;
    }
};

字符串转换整数：https://leetcode-cn.com/problems/string-to-integer-atoi/submissions/

class Solution {
public:
    int myAtoi(string s) {
        int i = 0;
        int a = 1;
        long num = 0;
        while (s[i] == ' ')
            i++;
        
        if (s[i] <= '9' && s[i] >= '0' || s[i] == '+' || s[i] == '-')
        {
            if (s[i] == '+')
                i++;
            else if (s[i] == '-')
            {
                a = -1;
                i++;
            }
            while (s[i] <= '9' && s[i] >= '0')
            {
                num = num * 10 + (s[i] - '0');
                i++;
                if (a * num <= INT_MIN )
                    return INT_MIN;
                else if (a * num >= INT_MAX)
                    return INT_MAX;
            }
        }
        return  int(a * num);
    }
};

在排序数中查找元素的第一个和最后一个位置：
https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/submissions/

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> v{-1,-1};
        int begin = 0;
        for (; begin < nums.size(); begin++)
        {
            if (nums[begin] == target)
            {
                v[0] = begin;
                while(begin < nums.size() && nums[begin] == target)
                    begin++;
                v[1] = begin - 1;
                return v;
            }
        }
        return v;
    }
};

验证回文串：https://leetcode-cn.com/problems/valid-palindrome/

class Solution {
public:
    bool isPalindrome(string s) {
        if(s.empty())
            return true;

        for(auto& ch:s)
        {
            if(ch>='A'&&ch<='Z')
                ch+=32;
        }
        int begin=0,end=s.size()-1;
        while(begin<end)
        {
            while(begin<end)
            {
                if(isalnum(s[begin]))
                    break;
                begin++;
            }

            while(begin<end)
            {
                if(isalnum(s[end]))
                    break;
                end--;
            }
            if(s[begin] !=s [end])
                return false;
            else
            {
                begin++;
                end--;
            }
        }
        return true;
    }
};

压缩字符串：https://leetcode-cn.com/problems/string-compression/

class Solution {
public:
    int compress(vector<char>& chars) {
        int i = 0;
        int k = 0;
        while (i < chars.size())
        {
            int count = 1;
            int key = i;
            while (i + 1 < chars.size() && chars[i] == chars[i + 1])
            {
                count++;
                i++;
            }
            i++;
            if (count != 1)
            {
                //元素有很多的情况
                chars[k++] = chars[key];
                vector<char> v;
                while (count)
                {
                    v.push_back(count % 10);
                    count /= 10;
                }
                for (auto it = v.rbegin(); it < v.rend(); it++)
                {
                    chars[k++] = *it + '0';
                }
            }
            else
            {
                //元素只有一个的情况
                chars[k++] = chars[key];
            }
        }
        return k;
    }
};

最短无序连续子数组：https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/submissions/

class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        if (nums[0] > nums[nums.size() - 1])
            return nums.size();

        int begin = -1; 
        int end = -1;
        vector<int> v;
        for (auto e : nums)
            v.push_back(e);
        sort(v.begin(), v.end());

        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] != v[i])
            {
                begin = i;
                break;
            }
        }
        if (begin == -1)
            return 0;
        for (int i = nums.size() - 1; i >= 0; i--)
        {
            if (nums[i] != v[i])
            {
                end = i;
                break;
            }
        }
        return end - begin + 1;
    }
};

逆波兰表达式求值：https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> s;
        for(auto e:tokens)
        {
            if(!("+"==e||"-"==e||"*"==e||"/"==e))
            {
                s.push(atoi(e.c_str()));
            }
            else
            {
                int right=s.top();
                s.pop();
                int left=s.top();
                s.pop();

                switch(e[0])
                {
                    case '+':
                       s.push(left+right);
                        break;
                    case '-':
                       s.push(left-right);
                        break;
                    case '*':
                       s.push(left*right);
                        break;
                    case '/':
                       s.push(left/right);
                        break;
                }
            }
        }
        return s.top();
    }
};

子集：https://leetcode-cn.com/problems/subsets/submissions/

class Solution {
public:
    vector<vector<int>> res;
    vector<int> v;
    void backtracking(vector<int>& nums, int index)
    {
        res.push_back(v);
        if (index >= nums.size())
            return;
        
        for (int i = index; i < nums.size(); i++)
        {
            v.push_back(nums[i]);
            backtracking(nums, i + 1);
            v.pop_back();
        }
    }

    vector<vector<int>> subsets(vector<int>& nums) {
        backtracking(nums, 0);
        return res;
    }
};

矩阵中的最长递增路径：https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/

class Solution {
public:
    int dfs(vector<vector<int>>& matrix, int row, int column,vector<vector<int>>& memo)
    {
        if (memo[row][column] != 0)
            return memo[row][column];

        memo[row][column]++;
        
        for (int i = 0; i < 4; i++)
        {
            int newRow = row + dirs[i][0];
            int newColumn = column + dirs[i][1];
            if (newRow >= 0 && newRow < rows && newColumn >= 0 && newColumn < columns 
            && matrix[newRow][newColumn] > matrix[row][column])
                memo[row][column] = max(memo[row][column], dfs(matrix, newRow, newColumn, memo) + 1);
        }
        return memo[row][column];
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if (matrix.size() == 0 || matrix[0].size() == 0)
            return 0;

        rows = matrix.size();
        columns = matrix[0].size();

        vector<vector<int>> memo(rows, vector<int>(columns, 0));
        int ans = 0;
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < columns; j++)
                ans = max(ans, dfs(matrix, i, j, memo));
        return ans;
    }
private:
    int rows;
    int columns;
    int dirs[4][2] = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
};